#!/usr/bin/env ruby
#
# Once-only  Run applications once with the same inputs
# Author:: Pjotr Prins
# Copyright:: 2013

USAGE =<<EOB

once-only runs a command once only when inputs don't change!

Usage:

   --pbs opts  convert to PBS command with opts
   --skip1     skip making a hash of the executable command
   -v          increase verbosity
   -q          run quietly

See the README for examples

EOB

original_commands = ARGV.join(' ')

gempath = File.dirname(File.dirname(__FILE__))
$: << File.join(gempath,'lib')

VERSION_FILENAME=File.join(gempath,'VERSION')
version = File.new(VERSION_FILENAME).read.chomp

$stderr.print "once-only #{version} (using Ruby #{RUBY_VERSION}) by Pjotr Prins 2013\n"

require 'once-only'

if ARGV.size == 0
  print USAGE
  exit 1
end

def exit_error errval = 1
  $stderr.print "\nonce-only returned error #{errval}\n"
  exit errval
end

def parse_args(args)
  options = {}

  consume = lambda { |args|
    return args if File.exist?(args[0])
    case args[0]
      when '--pbs'
        options[:pbs] = args[1]
        consume.call(args[2..-1])
      when '--skip1'
        options[:skip1] = true
        consume.call(args[1..-1])
      when '-v' 
        options[:verbose] = true
        consume.call(args[1..-1])
      when '-q' 
        options[:quiet] = true
        consume.call(args[1..-1])
      else
        $stderr.print "Can not parse arguments",args
        exit_error(1)
      end
  }

  return consume.call(args),options
end

args,options = parse_args(ARGV)
p args,options if options[:verbose]
command = args.join(' ')
command_sha1 = OnceOnly::Check::calc_hash(command)

executable = args[0]
args = args[1..-1] if options[:skip1]

file_list = OnceOnly::Check::get_file_list(args) 
checksums = OnceOnly::Check::calc_file_checksums(file_list)
checksums.push ['SHA1',command_sha1,command]

once_only_filename = OnceOnly::Check::make_once_filename(checksums,File.basename(executable))
error_filename = once_only_filename + '.err'

if not File.exist?(once_only_filename)
  $stderr.print "Running #{command}\n" if not options[:quiet]
  if options[:pbs]
    # --- Submit PBS job
    pbs_command = 'echo "' + command + '"|qsub '+options[:pbs]
    $stderr.print(pbs_command) if options[:verbose]
    system(pbs_command)
    OnceOnly::Check::write_file(error_filename,checksums)
    exit_error($?.exitstatus)
  else
    # --- Run on command line
    if not system(command)
      OnceOnly::Check::write_file(error_filename,checksums)
      exit_error($?.exitstatus)
    else
      # --- Success!
      File.unlink(error_filename) if File.exist?(error_filename)
      OnceOnly::Check::write_file(once_only_filename,checksums)
    end
  end
else
  $stderr.print "Inputs unchanged. No need to rerun '#{original_commands}'!\n" if not options[:quiet]
end

exit 0  # success!
