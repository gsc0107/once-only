#!/usr/bin/env ruby
#
# Once-only  Run applications once with the same inputs
# Author:: Pjotr Prins
# Copyright:: 2013

USAGE = "once-only runs a command once only when inputs don't change!"

original_commands = ARGV.join(' ')

gempath = File.dirname(File.dirname(__FILE__))
$: << File.join(gempath,'lib')

VERSION_FILENAME=File.join(gempath,'VERSION')
version = File.new(VERSION_FILENAME).read.chomp

$stderr.print "once-only #{version} (biogem Ruby #{RUBY_VERSION}) by Pjotr Prins 2013\n"

if ARGV.size == 0
  print USAGE
end

def parse_args(args)
  options = {}

  consume = lambda { |args|
       case args[0]
         when '-v' 
           options[:verbose] = true
           consume.call(args[1..-1])
         when '-q' 
           options[:quiet] = true
           consume.call(args[1..-1])
         else
           return args
       end
     }

  return consume.call(args),options
end

args,options = parse_args(ARGV)
p options if options[:verbose]

require 'once-only'

checksums = OnceOnly::Check::calc_checksums(args)
once_only_filename = OnceOnly::Check::once_filename(checksums)
error_filename = once_only_filename + '.err'

if not File.exist?(once_only_filename)
  $stderr.print "Running #{original_commands}\n" if not options[:quiet]
  if not system(ARGV.join(' '))
    File.open(error_filename,'w') { |f|
      checksums.each { |items| f.print items[0],"\t",items[1],"\n" }
    }
    # return the exit status of the command
    errval = $?.exitstatus
    $stderr.print "Returned error #{errval}\n" if not options[:quiet]
    exit(errval)
  else
    # --- Success!
    File.unlink(error_filename) if File.exist?(error_filename)
    File.open(once_only_filename,'w') { |f|
      checksums.each { |items| f.print items[0],"\t",items[1],"\n" }
    }
  end
else
  $stderr.print "Inputs unchanged. No need to rerun '#{original_commands}'!\n" if not options[:quiet]
end

exit 0  # success!
